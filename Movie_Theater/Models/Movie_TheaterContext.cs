// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Movie_Theater.Models;

public partial class Movie_TheaterContext : DbContext
{
    public Movie_TheaterContext(DbContextOptions<Movie_TheaterContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Access> Access { get; set; }

    public virtual DbSet<Actors> Actors { get; set; }

    public virtual DbSet<Admins> Admins { get; set; }

    public virtual DbSet<Admins_Password> Admins_Password { get; set; }

    public virtual DbSet<Auditoriums> Auditoriums { get; set; }

    public virtual DbSet<BookingCoupons> BookingCoupons { get; set; }

    public virtual DbSet<BookingSeats_Detail> BookingSeats_Detail { get; set; }

    public virtual DbSet<BookingSnacks> BookingSnacks { get; set; }

    public virtual DbSet<BookingTicketTypes_Detail> BookingTicketTypes_Detail { get; set; }

    public virtual DbSet<Bookings> Bookings { get; set; }

    public virtual DbSet<Classes> Classes { get; set; }

    public virtual DbSet<Comments> Comments { get; set; }

    public virtual DbSet<Contacts> Contacts { get; set; }

    public virtual DbSet<Coupons> Coupons { get; set; }

    public virtual DbSet<EcpayOrders> EcpayOrders { get; set; }

    public virtual DbSet<Habbits> Habbits { get; set; }

    public virtual DbSet<Movie_Actor> Movie_Actor { get; set; }

    public virtual DbSet<Movie_Class> Movie_Class { get; set; }

    public virtual DbSet<Movies> Movies { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<PaymentTransactions> PaymentTransactions { get; set; }

    public virtual DbSet<Rating> Rating { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<Roles_Access> Roles_Access { get; set; }

    public virtual DbSet<Seats> Seats { get; set; }

    public virtual DbSet<ShowSeats> ShowSeats { get; set; }

    public virtual DbSet<Shows> Shows { get; set; }

    public virtual DbSet<Snacks> Snacks { get; set; }

    public virtual DbSet<Theaters> Theaters { get; set; }

    public virtual DbSet<TicketTypes> TicketTypes { get; set; }

    public virtual DbSet<Twins> Twins { get; set; }

    public virtual DbSet<UserPasswords> UserPasswords { get; set; }

    public virtual DbSet<User_Habbit> User_Habbit { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Access>(entity =>
        {
            entity.HasKey(e => e.AccessId).HasName("PK__Access__4130D05FF652796A");

            entity.Property(e => e.AccessDescription)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AccessName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Actors>(entity =>
        {
            entity.HasKey(e => e.ActorId).HasName("PK__Actors__57B3EA4B0DCAEF24");

            entity.Property(e => e.ActorName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Admins>(entity =>
        {
            entity.HasKey(e => e.Account).HasName("PK__Admins__B0C3AC47DB0CD3B0");

            entity.Property(e => e.Account).HasMaxLength(50);
            entity.Property(e => e.AdminName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");

            entity.HasOne(d => d.Role).WithMany(p => p.Admins)
                .HasForeignKey(d => d.Role_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Admins__Role_Id__1EA48E88");
        });

        modelBuilder.Entity<Admins_Password>(entity =>
        {
            entity.HasKey(e => e.Account).HasName("PK__Admins_P__B0C3AC47742FE765");

            entity.Property(e => e.Account).HasMaxLength(50);
            entity.Property(e => e.AdminPassword)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.AccountNavigation).WithOne(p => p.Admins_Password)
                .HasForeignKey<Admins_Password>(d => d.Account)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Admins_Pa__Accou__2180FB33");
        });

        modelBuilder.Entity<Auditoriums>(entity =>
        {
            entity.HasKey(e => e.AuditoriumId).HasName("PK__Auditori__6E91B18525E5107F");

            entity.Property(e => e.AuditoriumName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AuditoriumType).HasMaxLength(50);

            entity.HasOne(d => d.Theater).WithMany(p => p.Auditoriums)
                .HasForeignKey(d => d.Theater_Id)
                .HasConstraintName("FK__Auditoriu__Theat__5EBF139D");
        });

        modelBuilder.Entity<BookingCoupons>(entity =>
        {
            entity.HasKey(e => e.BookingCouponID).HasName("PK__BookingC__7A33E4672AC6FD30");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingCoupons)
                .HasForeignKey(d => d.BookingID)
                .HasConstraintName("FK__BookingCo__Booki__0B91BA14");

            entity.HasOne(d => d.Coupon).WithMany(p => p.BookingCoupons)
                .HasForeignKey(d => d.CouponID)
                .HasConstraintName("FK__BookingCo__Coupo__0C85DE4D");
        });

        modelBuilder.Entity<BookingSeats_Detail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PK__BookingS__135C316D537C26E4");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingSeats_Detail)
                .HasForeignKey(d => d.Booking_Id)
                .HasConstraintName("FK__BookingSe__Booki__03F0984C");

            entity.HasOne(d => d.ShowSeat).WithMany(p => p.BookingSeats_Detail)
                .HasForeignKey(d => d.ShowSeat_Id)
                .HasConstraintName("FK__BookingSe__ShowS__04E4BC85");
        });

        modelBuilder.Entity<BookingSnacks>(entity =>
        {
            entity.HasKey(e => e.BookingSnackId).HasName("PK__BookingS__BE71E92C80793D2A");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingSnacks)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__BookingSn__Booki__07C12930");

            entity.HasOne(d => d.Snack).WithMany(p => p.BookingSnacks)
                .HasForeignKey(d => d.SnackId)
                .HasConstraintName("FK__BookingSn__Snack__08B54D69");
        });

        modelBuilder.Entity<BookingTicketTypes_Detail>(entity =>
        {
            entity.HasKey(e => e.TicketTypesDetailId).HasName("PK__BookingT__1CDBC808026F279C");

            entity.HasOne(d => d.Booking).WithMany(p => p.BookingTicketTypes_Detail)
                .HasForeignKey(d => d.Booking_Id)
                .HasConstraintName("FK__BookingTi__Booki__00200768");

            entity.HasOne(d => d.TicketType).WithMany(p => p.BookingTicketTypes_Detail)
                .HasForeignKey(d => d.TicketTypeId)
                .HasConstraintName("FK__BookingTi__Ticke__01142BA1");
        });

        modelBuilder.Entity<Bookings>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Bookings__73951AEDDDB7012A");

            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.BookingStatus)
                .HasMaxLength(20)
                .HasDefaultValue("Pending");
            entity.Property(e => e.MerchantTradeNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Showing).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.ShowingId)
                .HasConstraintName("FK__Bookings__Showin__7C4F7684");
        });

        modelBuilder.Entity<Classes>(entity =>
        {
            entity.HasKey(e => e.ClassId).HasName("PK__Classes__CB1927C05BB80CBF");

            entity.Property(e => e.ClassName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Comments>(entity =>
        {
            entity.HasKey(e => e.CommentsId).HasName("PK__Comments__9487C7CC675E4227");

            entity.Property(e => e.CommentMessage)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CommentTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Movie).WithMany(p => p.Comments)
                .HasForeignKey(d => d.Movie_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Comments__Movie___5535A963");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.User_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Comments__User_I__5629CD9C");
        });

        modelBuilder.Entity<Contacts>(entity =>
        {
            entity.HasKey(e => e.ContactId).HasName("PK__Contacts__5C66259BA9DF629D");

            entity.Property(e => e.ContactDescription)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.ContactStatus)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.CreateAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IssueType)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.User_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Contacts__User_I__1332DBDC");
        });

        modelBuilder.Entity<Coupons>(entity =>
        {
            entity.HasKey(e => e.CouponID).HasName("PK__Coupons__384AF1DA10A8F658");

            entity.HasIndex(e => e.CouponCode, "UQ__Coupons__D349080046F35E6F").IsUnique();

            entity.Property(e => e.CouponCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentUsageCount).HasDefaultValue(0);
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.DiscountValue).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<EcpayOrders>(entity =>
        {
            entity.HasKey(e => e.EcpayOrdersID).HasName("PK__EcpayOrd__D5877089E8A00098");

            entity.Property(e => e.MemberID).HasMaxLength(50);
            entity.Property(e => e.MerchantTradeNo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);
            entity.Property(e => e.RtnMsg).HasMaxLength(50);
            entity.Property(e => e.TradeDate).HasMaxLength(50);
            entity.Property(e => e.TradeNo).HasMaxLength(50);
        });

        modelBuilder.Entity<Habbits>(entity =>
        {
            entity.HasKey(e => e.HabbitId).HasName("PK__Habbits__37878EF4EBC1BC78");

            entity.Property(e => e.Habbit)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Movie_Actor>(entity =>
        {
            entity.HasKey(e => new { e.Movie_Id, e.Actor_Id }).HasName("PK__Movie_Ac__B4DF441D6E6C20AA");

            entity.HasOne(d => d.Actor).WithMany(p => p.Movie_Actor)
                .HasForeignKey(d => d.Actor_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Movie_Act__Actor__440B1D61");

            entity.HasOne(d => d.Movie).WithMany(p => p.Movie_Actor)
                .HasForeignKey(d => d.Movie_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Movie_Act__Movie__4316F928");
        });

        modelBuilder.Entity<Movie_Class>(entity =>
        {
            entity.HasKey(e => new { e.Movie_Id, e.Class_Id }).HasName("PK__Movie_Cl__11817476B09900D3");

            entity.HasOne(d => d.Class).WithMany(p => p.Movie_Class)
                .HasForeignKey(d => d.Class_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Movie_Cla__Class__3E52440B");

            entity.HasOne(d => d.Movie).WithMany(p => p.Movie_Class)
                .HasForeignKey(d => d.Movie_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Movie_Cla__Movie__3D5E1FD2");
        });

        modelBuilder.Entity<Movies>(entity =>
        {
            entity.HasKey(e => e.MovieId).HasName("PK__Movies__4BD2941AC81007C9");

            entity.Property(e => e.DirectorName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.MovieDescription).IsRequired();
            entity.Property(e => e.MovieEnglishName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MovieName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MovieState).HasDefaultValue(false);
            entity.Property(e => e.Movievideo).IsUnicode(false);
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.NewsId).HasName("PK__News__954EBDF35EEB11C8");

            entity.Property(e => e.NewsDescription).HasMaxLength(200);
            entity.Property(e => e.NewsEventNotice).HasMaxLength(100);
            entity.Property(e => e.NewsTitle).HasMaxLength(200);
            entity.Property(e => e.NewsType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PaymentTransactions>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__PaymentT__55433A6B67DFDB22");

            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Booking).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__PaymentTr__Booki__0F624AF8");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => new { e.Movie_Id, e.User_Id }).HasName("PK__Rating__688EDD324AA23E36");

            entity.Property(e => e.Rating1).HasColumnName("Rating");

            entity.HasOne(d => d.Movie).WithMany(p => p.Rating)
                .HasForeignKey(d => d.Movie_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Rating__Movie_Id__59063A47");

            entity.HasOne(d => d.User).WithMany(p => p.Rating)
                .HasForeignKey(d => d.User_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Rating__User_Id__59FA5E80");
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Roles__8AFACE1AB8B77D39");

            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Roles_Access>(entity =>
        {
            entity.HasKey(e => new { e.Role_Id, e.Access_Id }).HasName("PK__Roles_Ac__803030D2705ED123");

            entity.HasOne(d => d.Access).WithMany(p => p.Roles_Access)
                .HasForeignKey(d => d.Access_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Roles_Acc__Acces__1AD3FDA4");

            entity.HasOne(d => d.Role).WithMany(p => p.Roles_Access)
                .HasForeignKey(d => d.Role_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Roles_Acc__Role___19DFD96B");
        });

        modelBuilder.Entity<Seats>(entity =>
        {
            entity.HasKey(e => e.SeatId).HasName("PK__Seats__311713F3A9B5B47C");

            entity.Property(e => e.SeatRow)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.SeatStatus)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.SeatType)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Auditorium).WithMany(p => p.Seats)
                .HasForeignKey(d => d.Auditorium_Id)
                .HasConstraintName("FK__Seats__Auditoriu__619B8048");
        });

        modelBuilder.Entity<ShowSeats>(entity =>
        {
            entity.HasKey(e => e.ShowSeatId).HasName("PK__ShowSeat__9536FC939C801092");

            entity.Property(e => e.ShowSeatStatus)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValue("Available");

            entity.HasOne(d => d.Seat).WithMany(p => p.ShowSeats)
                .HasForeignKey(d => d.Seat_Id)
                .HasConstraintName("FK__ShowSeats__Seat___693CA210");

            entity.HasOne(d => d.Show).WithMany(p => p.ShowSeats)
                .HasForeignKey(d => d.Show_Id)
                .HasConstraintName("FK__ShowSeats__Show___68487DD7");
        });

        modelBuilder.Entity<Shows>(entity =>
        {
            entity.HasKey(e => e.ShowId).HasName("PK__Shows__6DE3E0B2D567AA1C");

            entity.Property(e => e.ShowDateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Auditorium).WithMany(p => p.Shows)
                .HasForeignKey(d => d.Auditorium_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Shows__Auditoriu__656C112C");

            entity.HasOne(d => d.Movie).WithMany(p => p.Shows)
                .HasForeignKey(d => d.Movie_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Shows__Movie_Id__6477ECF3");
        });

        modelBuilder.Entity<Snacks>(entity =>
        {
            entity.HasKey(e => e.SnackId).HasName("PK__Snacks__320A85CB58988B26");

            entity.Property(e => e.SnackName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Theaters>(entity =>
        {
            entity.HasKey(e => e.TheaterId).HasName("PK__Theaters__4D68B2197A3F3910");

            entity.Property(e => e.TheaterDescription).HasMaxLength(200);
            entity.Property(e => e.TheaterEmail)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TheaterLocation)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TheaterName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TheaterPhone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TicketTypes>(entity =>
        {
            entity.HasKey(e => e.TicketTypeId).HasName("PK__TicketTy__6CD68431CACA85EA");

            entity.Property(e => e.TicketDescription).HasMaxLength(200);
            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Twins>(entity =>
        {
            entity.HasKey(e => new { e.User_Id, e.Invitee_Id, e.Show_Id }).HasName("PK__Twins__F63A532DB2727A3C");

            entity.HasOne(d => d.Invitee).WithMany(p => p.TwinsInvitee)
                .HasForeignKey(d => d.Invitee_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Twins__Invitee_I__6FE99F9F");

            entity.HasOne(d => d.Show).WithMany(p => p.Twins)
                .HasForeignKey(d => d.Show_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Twins__Show_Id__6E01572D");

            entity.HasOne(d => d.User).WithMany(p => p.TwinsUser)
                .HasForeignKey(d => d.User_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Twins__User_Id__6EF57B66");
        });

        modelBuilder.Entity<UserPasswords>(entity =>
        {
            entity.HasKey(e => e.UserPasswordId).HasName("PK__UserPass__FD2F7D5FAB8F37F4");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswords)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__UserPassw__UserI__5070F446");
        });

        modelBuilder.Entity<User_Habbit>(entity =>
        {
            entity.HasKey(e => new { e.Habbit_Id, e.User_Id }).HasName("PK__User_Hab__0DE6E2D88F4ACFC0");

            entity.HasOne(d => d.Habbit).WithMany(p => p.User_Habbit)
                .HasForeignKey(d => d.Habbit_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_Habb__Habbi__4CA06362");

            entity.HasOne(d => d.User).WithMany(p => p.User_Habbit)
                .HasForeignKey(d => d.User_Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_Habb__User___4D94879B");
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C15F61B7D");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534300B5F25").IsUnique();

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailConfirm).HasDefaultValue(false);
            entity.Property(e => e.EmailToken).HasMaxLength(256);
            entity.Property(e => e.MBTI)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.NickName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Sex)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}