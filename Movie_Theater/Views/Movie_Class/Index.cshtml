@model MoviesViewModel
@* 電影管理 --> detail ->> 該部的類型按鈕 --> 該部電影的修改類型 *@
@{
    ViewData["Title"] = "Index";
}
@section Styles
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.1/dist/sweetalert2.min.css" rel="stylesheet" />
    <style>
        /* 卡片樣式 */
        .card.movie-box {
            border-radius: 8px;
            width: 300px;
            border: 1px solid #ddd;
            overflow: hidden; /* 確保卡片內容不超出邊界 */
            margin-bottom: 15px; /* 添加一些下邊距 */
        }

        .card-header {
            background-color: #f8f9fa; /* 淺灰色背景 */
            color: #333;
            padding: 10px;
            font-size: 1.25rem;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }

            .card-header .text-truncate {
                max-width: 100%;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

        .card-body {
            padding: 15px;
        }

        .btn-block {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border-radius: 5px;
        }

        /* 列表項目樣式 */
        .list-group-item {
            background-color: #f0f0f0; /* 深一點的灰色背景，區分每個項目 */
            border: 1px solid #ccc; /* 修改邊框顏色，使其更明顯 */
            margin-bottom: 10px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            position: relative; /* 確保刪除按鈕的位置可以調整 */
        }

            .list-group-item .delete-button {
                position: absolute;
                right: 10px; /* 距離右側邊框10px */
                top: 50%;
                transform: translateY(-50%); /* 確保按鈕垂直居中 */
            }

        /* 下拉選單樣式 */
        .button-group select {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ced4da;
            font-size: 14px;
            background-color: #fff;
        }

        /* 調整返回按鈕的位置 */
        .text-end {
            text-align: right;
        }

        .btn-secondary {
            border-radius: 5px;
        }
    </style>
}
<div class="card movie-box shadow-sm">
    <div class="card-header bg-light text-dark text-center">
        <h5 class="mb-0 text-truncate">@Model.MovieName</h5>
    </div>
    <div class="card-body">
        <div class="button-group">
            <select asp-for="ClassId" class="form-control mb-3" asp-items="@ViewBag.Class_Id"></select>
            <button id="Create" class="btn btn-success btn-block">
                <i class="bi bi-plus-square"></i> 新增類型
            </button>
        </div>
        <div id="dynamic-content" class="mt-4">
            <ul class="list-group">
                <!-- 動態顯示 -->
            </ul>
        </div>
    </div>
    <div class="text-end card-footer">
        <a asp-controller="Movies" asp-action="Details" asp-route-id="@Model.MovieId" class="btn btn-secondary">返回</a>
    </div>
</div>

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.1/dist/sweetalert2.all.min.js"></script>
    <script>
      // 當文件加載完成後執行
        $(document).ready(function () {
            // 加載已有的類型列表
            Add();

            // 當新增按鈕被點擊時執行
            $('#Create').on('click', function () {
                let movieId = @Html.Raw(ViewBag.MovieId); // 取得電影的ID
                let classId = $('#ClassId').val(); // 取得選中的類型ID

                // 準備要發送的數據
                let data = {
                    "Movie_Id": movieId,
                    "Class_Id": classId
                };
                let jsonData = JSON.stringify(data); // 將數據轉換為JSON格式

                // 發送AJAX請求到後端進行新增操作
                $.ajax({
                    type: "POST",
                    url: `/Movie_Class/Create`, // 請求的URL
                    contentType: "application/json", // 告訴伺服器我們發送的是JSON格式的數據
                    data: jsonData, // 實際發送的數據
                }).done(data => {
                    console.log(data); // 輸出後端返回的數據到控制台

                    // 根據後端返回的結果顯示不同的提示
                    if (data == "儲存成功") {
                        Add(); // 新增成功後重新加載列表
                        Swal.fire({
                            title: "新增成功",
                            icon: "success",
                            timer: 1500, // 1.5秒後自動關閉
                            showConfirmButton: false
                        });
                    } else if (data == "該類型已存在") {
                        Swal.fire({
                            title: "新增失敗",
                            text: "該類型已存在，無法重複新增",
                            icon: "error",
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            title: "新增失敗",
                            text: "發生未知錯誤，請稍後再試。",
                            icon: "error",
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }
                }).fail(err => {
                    // 如果AJAX請求失敗，顯示錯誤提示
                    alert(`呼叫失敗，錯誤訊息:${err}`);
                });
            });
        });

        // 用於加載和顯示已存在的類型
        function Add() {
            $.ajax({
                type: "GET", // 使用GET方法來取得數據
                url: `/Movie_Class/CreateClassType?id=@ViewBag.classes`, // 從後端獲取類型列表
            }).done(data => {
                console.log(data); // 輸出取得的數據到控制台
                $('#dynamic-content ul').empty(); // 清空現有的列表內容

                // 遍歷取得的類型數據並生成列表項
                data.forEach(cls => {
                    let listItem = `
                        <li class="list-group-item" id="${cls.class_Id}">${cls.className}
                            <!-- 刪除按鈕，點擊後觸發deleteClass函數 -->
                            <button class="delete-button btn btn-danger" id="${cls.class_Id}" onclick="deleteClass(${cls.class_Id})">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        </li>`;
                    $('#dynamic-content ul').append(listItem); // 將新生成的列表項添加到ul中
                });
            }).fail(err => {
                // 如果請求失敗，顯示錯誤提示
                alert(`呼叫失敗，錯誤訊息:${err}`);
            });
        }

        // 刪除指定類型的函數
        function deleteClass(id) {
            // 使用SweetAlert2進行刪除確認提示
            Swal.fire({
                title: '確定要刪除這個類型嗎？',
                text: '此操作無法復原！',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: '確定刪除',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    // 如果用戶確認刪除，執行AJAX刪除請求
                    let movieId = @Html.Raw(ViewBag.MovieId); // 取得電影ID
                    let data = {
                        "Movie_Id": movieId,
                        "Class_Id": id
                    };
                    let jsonData = JSON.stringify(data); // 將數據轉換為JSON格式

                    $.ajax({
                        type: "POST", // 使用POST方法進行刪除操作
                        url: '/Movie_Class/Delete', // 刪除請求的URL
                        data: jsonData, // 發送的數據
                        contentType: 'application/json' // 告訴伺服器我們發送的是JSON格式的數據
                    }).done(data => {
                        console.log(data); // 輸出後端返回的數據到控制台
                        Add(); // 刪除成功後重新加載列表
                        Swal.fire(
                            '已刪除！',
                            '該類型已成功刪除。',
                            'success'
                        );
                    }).fail(err => {
                        // 如果請求失敗，顯示錯誤提示
                        alert(`呼叫失敗，錯誤訊息:${err}`);
                    });
                }
            });
        }
        

    </script>
}